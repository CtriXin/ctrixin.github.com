'use strict';
/**
 * db session
 
  DROP TABLE IF EXISTS `think_session`;
  CREATE TABLE `think_session` (
    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
    `cookie` varchar(255) NOT NULL DEFAULT '',
    `data` text,
    `expire` bigint(11) NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `cookie` (`cookie`),
    KEY `expire` (`expire`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

exports.__esModule = true;

var _default = (function (_think$adapter$base) {
  _inherits(_default, _think$adapter$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init(options) {

    options = think.parseConfig(options);
    this.cookie = options.cookie;

    this.timeout = options.timeout;
    this.isChanged = false;

    //let dbConfig = think.extend({}, think.config('db'), options);
    this.model = think.model('session', think.config('db'));

    this.gcType = 'session_db';
    think.gc(this);
  };

  /**
   * get session data
   * @return {Promise} []
   */

  _default.prototype.getData = function getData() {
    var data;
    return _regeneratorRuntime.async(function getData$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!this.data) {
            context$2$0.next = 2;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.model.where({ cookie: this.cookie }).find());

        case 4:
          data = context$2$0.sent;

          this.data = {};

          if (!think.isEmpty(data)) {
            context$2$0.next = 10;
            break;
          }

          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(this.model.add({ cookie: this.cookie, expire: Date.now() + this.timeout * 1000 }));

        case 9:
          return context$2$0.abrupt('return', this.data);

        case 10:
          if (!(Date.now() > data.expire)) {
            context$2$0.next = 12;
            break;
          }

          return context$2$0.abrupt('return', this.data);

        case 12:
          try {
            this.data = JSON.parse(data.data) || {};
          } catch (e) {}
          return context$2$0.abrupt('return', this.data);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var _this = this;

    return this.getData().then(function () {
      return name ? _this.data[name] : _this.data;
    });
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value) {
    var _this2 = this;

    var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];

    this.timeout = timeout;
    return this.getData().then(function () {
      _this2.isChanged = true;
      _this2.data[name] = value;
    });
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    var _this3 = this;

    return this.getData().then(function () {
      _this3.isChanged = true;
      if (name) {
        delete _this3.data[name];
      } else {
        _this3.data = {};
      }
    });
  };

  /**
   * flush data
   * @return {Promise} []
   */

  _default.prototype.flush = function flush() {
    var _this4 = this;

    var data = {
      expire: Date.now() + this.timeout * 1000,
      timeout: this.timeout
    };
    return this.getData().then(function () {
      //if session is empty and not changed, not flush
      if (!_this4.isChanged && think.isEmpty(_this4.data)) {
        return;
      }
      //update data when data is changed
      if (_this4.isChanged) {
        data.data = JSON.stringify(_this4.data);
      }
      return _this4.model.where({ cookie: _this4.cookie }).update(data);
    });
  };

  /**
   * gc
   * @return {Promise} []
   */

  _default.prototype.gc = function gc() {
    return this.model.where({ expire: { '<': Date.now() } })['delete']();
  };

  return _default;
})(think.adapter.base);

exports['default'] = _default;
module.exports = exports['default'];