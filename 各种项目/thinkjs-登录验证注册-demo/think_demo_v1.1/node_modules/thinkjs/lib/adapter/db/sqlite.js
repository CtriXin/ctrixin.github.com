'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var SqliteSocket = think.adapter('socket', 'sqlite');
/**
 * sqlite db
 */

var _default = (function (_Base) {
  _inherits(_default, _Base);

  function _default() {
    _classCallCheck(this, _default);

    _Base.apply(this, arguments);
  }

  /**
   * get sqlite socket instance
   * @param  {Object} config []
   * @return {}        []
   */

  _default.prototype.socket = function socket(sql) {
    if (this._socket) {
      return this._socket;
    }
    var config = think.extend({
      sql: sql
    }, this.config);
    this._socket = SqliteSocket.getInstance(config, thinkCache.DB, ['sql']);
    return this._socket;
  };

  /**
   * get table info
   * @param  {String} table [table name]
   * @return {Promise}       []
   */

  _default.prototype.getFields = function getFields(table) {
    var data, ret;
    return _regeneratorRuntime.async(function getFields$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.query('PRAGMA table_info( ' + table + ' )'));

        case 2:
          data = context$2$0.sent;
          ret = {};

          data.forEach(function (item) {
            ret[item.name] = {
              name: item.name,
              type: item.type,
              required: !!item.notnull,
              'default': item.dflt_value,
              primary: !!item.pk,
              auto_increment: false
            };
          });
          return context$2$0.abrupt('return', ret);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * escape string
   * @param  {String} str []
   * @return {String}     []
   */

  _default.prototype.escapeString = function escapeString(str) {
    return str.replace(/\'/g, '\'\'');
  };

  /**
   * parse limit
   * @param  {Array} limit []
   * @return {String}       []
   */

  _default.prototype.parseLimit = function parseLimit(limit) {
    if (think.isEmpty(limit)) {
      return '';
    }
    if (think.isNumber(limit)) {
      return ' LIMIT ' + limit;
    }
    if (think.isString(limit)) {
      limit = limit.split(/\s*,\s*/);
    }
    if (limit[1]) {
      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);
    }
    return ' LIMIT ' + (limit[0] | 0);
  };

  return _default;
})(_baseJs2['default']);

exports['default'] = _default;
module.exports = exports['default'];