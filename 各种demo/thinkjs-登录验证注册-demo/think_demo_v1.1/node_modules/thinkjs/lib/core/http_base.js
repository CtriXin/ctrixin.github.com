'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

/**
 * Base Class
 * @param  {Object} http
 * @return {Class}
 */

var _default = (function (_Base) {
  _inherits(_default, _Base);

  function _default() {
    _classCallCheck(this, _default);

    _Base.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} http []
   * @return {}      []
   */

  _default.prototype.init = function init() {
    var http = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.http = http;
  };

  /**
   * get or set config
   * @param  {string} name  [config name]
   * @param  {mixed} value [config value]
   * @return {mixed}       []
   */

  _default.prototype.config = function config(name, value) {
    return think.config(name, value, this.http._config);
  };

  /**
   * invoke action
   * @param  {Object} controller [controller instance]
   * @param  {String} action     [action name]
   * @param  {Mixed} data       [action params]
   * @return {}            []
   */

  _default.prototype.action = function action(controller, _action) {
    if (think.isString(controller)) {
      controller = this.controller(controller);
    }
    if (_action !== '__call') {
      _action = think.camelCase(_action) + 'Action';
    }
    return controller.invoke(_action, controller);
  };

  /**
   * get or set cache
   * @param  {String} name    [cache name]
   * @param  {mixed} value   [cache value]
   * @param  {Object} options [cache options]
   * @return {}         []
   */

  _default.prototype.cache = function cache(name, value, options) {
    options = think.extend({}, this.config('cache'), options);
    return think.cache(name, value, options);
  };

  /**
   * invoke hook
   * @param  {String} event [event name]
   * @return {Promise}       []
   */

  _default.prototype.hook = function hook(event, data) {
    return think.hook(event, this.http, data);
  };

  /**
   * get model
   * @param  {String} name    [model name]
   * @param  {Object} options [model options]
   * @return {Object}         [model instance]
   */

  _default.prototype.model = function model() {
    var name = arguments.length <= 0 || arguments[0] === undefined ? 'base' : arguments[0];
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    options = think.extend({}, this.config('db'), options);
    return think.model(name, options, this.http.module);
  };

  /**
   * get controller
   * this.controller('home/controller/test')
   * @param  {String} name [controller name]
   * @return {Object}      []
   */

  _default.prototype.controller = function controller(name) {
    var Cls = think.lookClass(name, 'controller', this.http.module);
    return new Cls(this.http);
  };

  /**
   * get service
   * @param  {String} name [service name]
   * @return {Object}      []
   */

  _default.prototype.service = function service(name) {
    return think.service(name, this.http, this.http.module);
  };

  return _default;
})(_baseJs2['default']);

exports['default'] = _default;
module.exports = exports['default'];